<?xml version="1.0"?>
<!--
  Robot model adapted from
https://github.com/CIR-KIT/steer_drive_ros/blob/kinetic-devel/steer_drive_controller/test/common/urdf/steerbot.xacro

  Modifications:
    Remove base_footprint link. Useful for navigation but not necessary for a simple example.
    Added materials for URDF
    Updated inertials

  Geometry:
    The Ackermann steering controllers require the longitudinal
    separation between the front and back wheel axes and the
    lateral separation between the left and right front steering axes.
    
    For this model:
    wheel_separation_h = base_length - 2 * axle_offset = 0.4
    wheel_separation_w = base_width  + 2 * axle_offset = 0.4
-->
<robot name="erp42_vehicle" xmlns:xacro="http://wiki.ros.org/xacro">
  <!-- Include xacro for inertials, materials and wheels -->
  <xacro:include filename="$(find erp42_vehicle_description)/urdf/wheel.xacro" />
  <xacro:include filename="$(find erp42_vehicle_description)/urdf/gps_sensor.xacro" />
  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro" />
  <xacro:property name="robot_namespace" value="/erp42_vehicle" />

  <!-- Gazebo plugins -->
  <gazebo>
    <!-- Load ros_control plugin using the steer_bot_hardware_gazebo
    implementation of the hardware_interface::RobotHW -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <!-- <robotNamespace>${robot_namespace}</robotNamespace> -->
      <robotSimType>erp42_hardware_gazebo/ERP42HardwareGazebo</robotSimType>
      <legacyModeNS>false</legacyModeNS>
    </plugin>
  </gazebo>

  <!-- added xacro for VLP16-chanhyeokson -->
  <xacro:arg name="gpu" default="true" />
  <xacro:property name="gpu" value="$(arg gpu)" />
  <xacro:arg name="organize_cloud" default="false" />
  <xacro:property name="organize_cloud" value="$(arg organize_cloud)" />

  <!-- Math constants -->
  <xacro:property name="deg_to_rad" value="0.01745329251994329577" />

  <!-- Robot base dimensions -->
  <xacro:property name="base_length" value="1.6" />
  <xacro:property name="base_width" value="0.35" />
  <xacro:property name="base_height" value="0.3" />
  <xacro:property name="base_mass" value="5" />

  <!-- Wheel link dimensions -->
  <xacro:property name="wheel_radius" value="0.27" />
  <xacro:property name="wheel_thickness" value="0.18" />
  <xacro:property name="wheel_mass" value="1" />

  <!-- Steering link dimensions -->
  <xacro:property name="steer_radius" value="0.05" />
  <xacro:property name="steer_thickness" value="0.02" />
  <xacro:property name="steer_mass" value="1" />

  <!-- Axle positions -->
  <xacro:property name="axle_offset" value="0.225" />
  <xacro:property name="steer_offset" value="0.1" />


  <link name="base_link">
    <origin xyz="0 0 0" rpy="0 0 0" />

    <visual>
      <origin xyz="0 0 0.1" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
      <material name="yellow">
        <color rgba="1 1 0 1" />

      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
    </collision>
    <xacro:solid_cuboid_inertial
      rpy="0 0 0" xyz="0 0 0"
      mass="${base_mass}"
      x="${base_length}" y="${base_width}" z="${base_height}" />
  </link>

    <xacro:gps_sensor namespace="" parent_link="base_link">
      <origin xyz="0 0 1" rpy="0 0 0" />
  </xacro:gps_sensor>

  <!-- Front steer and rear wheel joints required for ackermann_steering_controller -->
  <xacro:front_steer
    name="front"
    parent="base"
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}"
    steer_mass="${steer_mass}"
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_steer>

  <xacro:rear_wheel
    name="rear"
    parent="base"
    wheel_radius="${wheel_radius/4}"
    wheel_thickness="${wheel_thickness/2}"
    wheel_mass="${wheel_mass/32}">
    <origin xyz="${-base_length/2+axle_offset} 0 0" rpy="${-90 * deg_to_rad} 0 0" />
  </xacro:rear_wheel>

  <!-- Steerable front wheels -->
  <xacro:front_wheel_lr
    name="front_right"
    parent="base"
    reflect="-1"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}"
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}"
    steer_mass="${steer_mass}"
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_wheel_lr>
  <xacro:front_wheel_lr
    name="front_left"
    parent="base"
    reflect="1"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}"
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}"
    steer_mass="${steer_mass}"
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_wheel_lr>

  <!-- Rear wheels -->
  <xacro:rear_wheel_lr
    name="rear_right"
    parent="base"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="${-base_length/2+axle_offset} ${-base_width/2-axle_offset} 0"
      rpy="${-90 * deg_to_rad} 0 0" />
  </xacro:rear_wheel_lr>
  <xacro:rear_wheel_lr
    name="rear_left"
    parent="base"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="${-base_length/2+axle_offset} ${+base_width/2+axle_offset} 0"
      rpy="${-90 * deg_to_rad} 0 0" />
  </xacro:rear_wheel_lr>

  <!-- Colour -->
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>


  <!-- added xacro for VLP16-chanhyeokson-220309 -->
  <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro" />
  <xacro:VLP-16 parent="base_link" name="velodyne" topic="/velodyne_points"
    organize_cloud="${organize_cloud}" hz="60" samples="720" gpu="${gpu}">
    <origin xyz="0.75 0 0.30" rpy="0 0 0" />
  </xacro:VLP-16>

  <!-- IMU link -->
  <joint name="imu_joint" type="fixed">
    <axis xyz="0 0 1" />
    <origin xyz="0 0 0.35" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="imu_link" />
  </joint>
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.025" />
      </geometry>
      <material name="red">
        <color rgba="1 1 1 1" />
      </material>
    </visual>
  </link>

  <!-- Camera -->
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.75 0 0.40" rpy="0 -0.1 0" />
    <parent link="base_link" />
    <child link="camera_link" />
  </joint>

  <!-- Camera -->
  <xacro:property name="camera_size" value="0.05" /> <!-- Size of square 'camera' box -->
  <link name="camera_link">
    <visual>
      <geometry>
        <mesh filename="package://erp42_vehicle_description/meshes/sensors/kinect.dae" />
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 1.57" />
      <material name="black" />
    </visual>

    <inertial>
      <mass value="8.1" />
      <inertia ixx="0.0675" ixy="0.0" ixz="0.0"
        iyy="0.0135" iyz="0.0"
        izz="0.0675" />
    </inertial>
  </link>

  <!-- camera -->
  <gazebo reference="camera_link">
    <material>Gazebo/Black</material>
    <sensor type="depth" name="camera_ir">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>600</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.07</stddev>
        </noise>

      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>10.0</updateRate>
        <cameraName>camera_ir</cameraName>
        <imageTopicName>/camera/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
        <frameName>camera_link</frameName>
        <pointCloudCutoff>0.4</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0.07</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- imu addon 230406chson -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>imu</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>60.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>

    <!-- <sensor name="my_gps" type="gps"> -->
  <!-- ensure the sensor is active (required) -->
  <!-- <always_on>true</always_on> -->
  <!-- <update_rate>30</update_rate> -->
  <!-- <plugin name="my_gps_plugin" filename="libgazebo_ros_gps_sensor.so"> -->
    <!-- <ros> -->
      <!-- publish to /gps/data -->
      <!-- <namespace>/gps</namespace> -->
      <!-- <remapping>~/out:=data</remapping> -->
    <!-- </ros> -->
  <!-- </plugin> -->
<!-- </sensor> -->
  </gazebo>
  <!-- gps addon 0406chson -->
  <!-- <gazebo reference="gps_link">
    <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
      <alwayson>true</alwayson>
      <updateRate>8.0</updateRate>
      <bodyName>gps_link</bodyName>
      <topicName>/fix</topicName>
      <frameId>gps</frameId>
      <referenceLatitude>36.7600417</referenceLatitude>
      <referenceLongitude>127.2773724</referenceLongitude>
      <velocityTopicname>/fix_velocity</velocityTopicname>
      <drift>5.0 5.0 5.0</drift>
      <gaussianNoise>0.1 0.1 0.1</gaussianNoise>
      <velocityDrift>0 0 0</velocityDrift>
      <velocityGaussiannoise>0.1 0.1 0.1</velocityGaussiannoise>
    </plugin>
  </gazebo> -->
</robot>